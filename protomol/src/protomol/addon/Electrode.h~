#ifndef _ELECTRODE_H
#define _ELECTRODE_H

#include <protomol/type/Vector3D.h>
#include "boost/multi_array.hpp"
#include <vector>
#include <string>
#include <bitset>
#include <iostream>
#include <cassert>

using namespace std;
using namespace boost;
using namespace ProtoMol;


namespace ProtoMolAddon {

  class Electrode {
  public:
    class Voltage {
    private:
      vector<double>* v;
      double t0, dt;

    public:

      Voltage(vector<double>* v, double t0, double dt): v(v), t0(t0), dt(dt) {}

      Voltage& operator= (const Voltage& other) { 
	v = other.v;
	t0 = other.t0;
	dt = other.dt;
      }
    };

    typedef struct potl_t {
      multi_array<double, 3>* p;
      Vector3D x0, dx;
      bitset<3> reflection;
      potl_t(multi_array<double, 3>* p, const Vector3D& x0, const Vector3D& dx, const string& r): p(p), x0(x0), dx(dx), reflection(r) {}
    } potl_t;

  private:
    string label;
    volt_t volt;
    potl_t potl;

  public:
    Electrode(const string& label) :
      label(label),
      volt(NULL, 0, 0),
      potl(NULL, Vector3D(), Vector3D()), 
      reflection("0") {
    }

    ~Electrode() {};

    template <class Iterator> 
    void Volt(double t0, double dt, Iterator begin, Iterator end);

    const volt_t& Volt() { return volt; }

    void Volt(const volt_t& v) {
      volt = v;
    }
   
    template <class Iterator>
    Electrode& Volt(double t0, double dt, int size, Iterator begin, Iterator end) {
      volt.t0 = t0;
      volt.dt = dt;
      if (volt.v==NULL)
	volt.v = new vector<double>(size);

      volt.v->Assign(begin, end);
    }

    double GetVolt(double t, int offset) {
      assert(volt.v);
      int n = static_cast<int>((t - volt.t0)/volt.dt) + offset;

      if (n>volt.v->size())
	n = volt.v->size();
      else if (n<0)
	n = 0;

      return volt.v->at(n);
    }

    
    const potl_t& Potl() { return potl; }

    void Potl(const potl_t& p, const bitset<3>& r) {
      potl.p = p.p;
      potl.x0 = p.x0;
      potl.dx = p.dx;
      reflection = r;
    }


    //template <class Iterator>
    //Electrode& Potl(const Vector3D& x0, const Vector3D& dx, array<int, 3>& ext, Iterator begin, Iterator end);

    //Electrode& MirrorPotl(const Electrode* p, const bitset<3> reflection);
    //Electrode& CopyVoltl(const Electrode* p);

    //double GetPotl(const Vector3D& pos, const vector<int, 3> offset);
    //double GetVolt(double t, int offset);
    friend ostream& operator<<(ostream& os, const Electrode& e) {
      os << "Electrode label = " << e.label << "\n";
      return os;
    }
  };

  
}

#endif
