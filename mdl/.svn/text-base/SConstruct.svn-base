import os
import sys




execfile('configfuncs.py')
mdlmodules = {'integrator/leapfrog':['LeapfrogIntegrator', 'LeapfrogTruncatedShadow', 'PLeapfrogIntegrator', 'DMDLeapfrogIntegrator', 'NoseNVTLeapfrogIntegrator', 'NPTVerletIntegrator'],
              'integrator/':['PySTSIntegrator', 'PyMTSIntegrator'],
	      'integrator/base':['LangevinImpulseIntegrator', 'LangevinLeapfrogIntegrator', 'ImpulseIntegrator', 'CGMinimizerIntegrator', 'NumericalDifferentiation'],
             'type':['Vector3DBlock', 'ScalarStructure'],
	      'integrator/normal':['NormalModeBrownian', 'NormalModeDiagonalize', 'NormalModeMinimizer', 'NormalModeLangevin', 'NormalModeUtilities', 'NormalModeMori', 'NormalModeRelax', 'BBKIntegrator', 'NormalModeLangLf'],
              'integrator/hessian':['HessianInt'],
              'integrator/openMM':['OpenMMIntegrator'],
              'io':['DCDTrajectoryReader', 'EigenvectorReader', 'EigenvectorTextReader', 'PARReader', 'PDBReader', 'PDBWriter', 'PSFReader', 'XYZBinReader', 'XYZReader', 'XYZTrajectoryReader', 'XYZTrajectoryWriter', 'XYZWriter'],
	      'io/gromacs':['GromacsParameterFileReader', 'GromacsTopologyReader', 'PortGromacsParameters'],
              'output':['OutputCache', 'OutputDCDTrajectory', 'OutputDCDTrajectoryVel', 'OutputEnergies', 'OutputFAHGUI', 'OutputFinalPDBPos', 'OutputFinalXYZPos', 'OutputFinalXYZVel', 'OutputScreen', 'OutputXYZTrajectoryForce', 'OutputXYZTrajectoryPos', 'OutputXYZTrajectoryVel'],
              'modifier':['ModifierShake'],
              'base':['MathUtilities'],
	      'topology':['TopologyUtilities', 'GenericTopology'],
	      'force/bonded':['BondForce','AngleForce','DihedralForce','HarmDihedralForce','ImproperForce'],
              'force/nonbonded':['SimpleFullForce', 'CutoffForce'],
              'force/system':['PySystemForce'],
              'force':['ForceGroup'],
              './force/nonbonded':['EwaldForce', 'PMEForce', 'MultiGridForce'],
              './':['ProtoMolApp']
	     }


def pyWrap(env, pmhome):
  import distutils.sysconfig
  env.Append(SWIGFLAGS=['-c++', '-python', '-w312', '-w314', '-w315', '-w317', '-w361', '-w362', '-w389', '-w401', '-w454', '-w503', '-w509', '-I'+pmhome, '-I'+pmhome+os.sep+'src'+os.sep+'protomol', '-I'+pmhome+os.sep+'src'],
                     CPPPATH=[distutils.sysconfig.get_python_inc()],
                     SHLIBPREFIX=""#,
                     #ENV={'PATH':os.environ['PATH']})
                     )

  pyvers = "python%d.%d" % sys.version_info[:2]
  numpypath = env.get('numpy', '')
  if (numpypath == ''):
     numpypath = sys.exec_prefix
     if (env['PLATFORM'] == 'win32'):
        numpypath += "/Lib/site-packages/numpy/core/include/numpy/"
     else:
        numpypath2 = numpypath+"/lib/"+pyvers+"/dist-packages/numpy/core/include/numpy/"
        numpypath += "/lib/"+pyvers+"/site-packages/numpy/core/include/numpy/"
  else:
     numpypath += '/core/include/numpy/'
     numpypath2 = numpypath

  #env['ARFLAGS'] = "rcS"
  env.Append(CPPPATH = '#')
  if (env['PLATFORM'] != 'darwin'):
     env.Append(LINKFLAGS=' -Wl,-E')
  if (env['PLATFORM'] == 'win32'):
     env['LIBS'] = ''
     env.Append(CXXFLAGS='-I\"'+pmhome+'\"')
     env.Append(SHCXXFLAGS=' -I\"'+numpypath+'\"')
     env.Append(SHCXXFLAGS='-I\"'+pmhome+'\"')
     env.Append(LIBPATH='C:\Python25\libs')
     env.Append(CPPPATH='C:\Python25\include')
     #env.Append(SHCXXFLAGS='mdl.dll')
     #env['LIBSUFFIX'] = '.dll'
     env.Prepend(LIBS = [libname2])
  elif (env['PLATFORM'] == 'darwin'):
     env['LIBS'] = ''
     env.Append(CCFLAGS=' -D__APPLE__')
     env.Append(CXXFLAGS='-I'+pmhome)
     env.Append(SHCXXFLAGS=' -I'+numpypath)
     env.Append(SHCXXFLAGS=' -I'+numpypath2)
     env.Append(SHCXXFLAGS='-I'+pmhome)
     env.Append(LIBPATH=sys.exec_prefix+'/lib/python'+sys.version[0:3]+'/config/')
     env.Append(CPPPATH=sys.exec_prefix+'/include')
     env.Prepend(LIBS = ['blas', 'lapack', 'python2.6'])
     env.Append(CXXFLAGS='-I'+pmhome+os.sep+'src')
     env.Append(CXXFLAGS='-I'+pmhome+os.sep+'src'+os.sep+'protomol')
     env.Append(CXXFLAGS='-fno-common')
     env.Append(SHCXXFLAGS='-fno-common')
     env.Append(LINKFLAGS='-fno-common')
     #env['SHLINKFLAGS'].remove('-dynamiclib')
     #env.Append(SHLINKFLAGS='-bundle')
     #env.Append(SHLINKFLAGS='-bundle_loader')
  else:
     env.Append(CXXFLAGS=' -fPIC')
     env.Append(CXXFLAGS='-I'+pmhome)
     env.Append(SHCXXFLAGS=' -I'+numpypath)
     env.Append(SHCXXFLAGS=' -I'+numpypath2)
     env.Append(SHCXXFLAGS='-I'+pmhome+os.sep+'src')
     env.Append(SHCXXFLAGS='-I'+pmhome+os.sep+'src'+os.sep+'protomol')
  if (env['PLATFORM'] != 'darwin'):
     env.Append(SHLINKFLAGS=' -Wl,-E')
  env.Append(_LIBDIRFLAGS="-L.")

  #if (str(env['CCFLAGS']).find('HAVE_GUI') != -1):
  #  env.Append(SWIGFLAGS='-DHAVE_GUI')
  #if (str(env['CCFLAGS']).find('HAVE_OPENMM') != -1):
  #  env.Append(SWIGFLAGS='-DHAVE_OPENMM')
  for dir in mdlmodules.iterkeys():
    modulelist = mdlmodules[dir]
    for i in range(0, len(modulelist)):
       module = modulelist[i]
       if (env['PLATFORM'] == 'win32'):  
          env['SWIG'] = r'C:\Swig\swigwin-1.3.33\swig.exe'
          swigObject = env.SharedObject([os.getcwd()+'/interface/'+dir+'/'+module+'.i'])
          newlib = env.SharedLibrary(os.getcwd()+'/interface/'+dir+'/_'+module+'.dll', [os.getcwd()+'/interface/'+dir+'/'+module+'_wrap.cc', swigObject])
          copyToPYD = Copy(os.getcwd()+'/interface/'+dir+'/_'+module+'.pyd', os.getcwd()+'/interface/'+dir+'/_'+module+'.dll')
          env.AddPostAction(os.getcwd()+'/interface/'+dir+'/_'+module+'.dll', copyToPYD)
       else:
          env.SharedLibrary(target='interface/'+dir+'/_'+module+'.so', source=['interface/'+dir+'/'+module+'.i'], SHLIBPREFIX="", LIBS=['mdl']+env['LIBS'])



pwd = os.getcwd()
if (os.environ.has_key('PROTOMOL_HOME')):
   pmhome=os.getenv('PROTOMOL_HOME')
else:
   pmhome=pwd+'/../protomol/'
#execfile(pmhome+os.sep+'compiler.py')
#execfile('compiler.py')

# Command Line Options
opts = Options(pmhome+os.sep+'options.py')
Export('opts')

def novalidate(a, b, c):
   return

opts.AddOptions(
    BoolOption('gui', 'Set to 1 if using the GUI', 0),
    BoolOption('fah', 'Set to 1 to build library for Folding@Home', 0),
    BoolOption('lapack', 'Use LAPACK', 1),
    BoolOption('simtk_lapack', 'Use SimTK LAPACK', 0),
    PathOption('numpy', 'Numpy Root Directory', '', novalidate),
    EnumOption('openmm', 'Build with OpenMM', 'none', allowed_values=('none', 'reference', 'cuda'))
    )


def compiler_add_opts():
    opts.AddOptions(
        ('optimize', 'Set to 1 to force optimizations', -1),
        BoolOption('debug', 'Set to 1 to force debug options', 0),
        BoolOption('strict', 'Set to 0 to disable strict options', 1),
        BoolOption('threaded', 'Set to 1 to enable thread support', 1),
        BoolOption('profile', 'Set to 1 to enable profiler', 0),
        BoolOption('pic', 'Set to 1 to enable position independant code', 0),
        BoolOption('depends', 'Set to 1 to output dependency files', 0),
        BoolOption('distcc', 'Set to 1 to enable distributed builds', 0),
        BoolOption('ccache', 'Set to 1 to enable cached builds', 0),
        EnumOption('platform', 'Override default platform', '',
                   allowed_values = ('', 'win32', 'posix')),
        EnumOption('cxxstd', 'Set C++ language standard', 'c++98',
                   allowed_values = ('c++98', 'c++0x')),
        EnumOption('compiler', 'Select compiler', 'default',
                   allowed_values = ('default', 'gnu', 'intel', 'mingw', 'msvc',
                                     'linux-mingw', 'aix', 'posix', 'hp', 'sgi',
                                     'sun')))
 
    opts.Add('static', 'Link to static libraries', 0)


def compiler_configure(c99_mode = 1):
    if env.GetOption('clean'): return
 
    # Get options
    debug = env.get('debug')
    optimize = env.get('optimize')
    if optimize == -1: optimize = not debug
 
    strict = int(env.get('strict', 1))
    threaded = int(env.get('threaded', 1))
    profile = int(env.get('profile', 0))
    pic = int( env.get( 'pic', 0 ) )
    depends = int(env.get('depends', 0))
    compiler = env.get('compiler', 0)
    distcc = env.get('distcc', 0)
    ccache = env.get('ccache', 0)
    cxxstd = env.get('cxxstd', 'c++0x')
    platform = env.get('platform', '')
    static = int(env.get('static', 0))
    num_jobs = env.get('num_jobs', -1)
 
    if platform != '':
        env.Replace(PLATFORM = platform)
 
    # Select compiler
    if compiler:
        if compiler == 'gnu':
            Tool('gcc')(env)
            Tool('g++')(env)
 
        elif compiler == 'intel':
            Tool('intelc')(env)
            env['ENV']['INTEL_LICENSE_FILE'] = (
                os.environ.get("INTEL_LICENSE_FILE", ''))
 
        elif compiler == 'linux-mingw':
            env.Replace(CC = 'i586-mingw32msvc-gcc')
            env.Replace(CXX = 'i586-mingw32msvc-g++')
            env.Replace(RANLIB = 'i586-mingw32msvc-ranlib')
            env.Replace(PROGSUFFIX = '.exe')
 
        elif compiler == 'posix':
            Tool('cc')(env)
            Tool('cxx')(env)
            Tool('link')(env)
            Tool('ar')(env)
            Tool('as')(env)
 
        elif compiler in Split('hp sgi sun aix'):
            Tool(compiler + 'cc')(env)
            Tool(compiler + 'c++')(env)
            Tool(compiler + 'link')(env)
 
            if compiler in Split('sgi sun'):
                Tool(compiler + 'ar')(env)
 
        elif compiler != 'default':
            Tool(compiler)(env)
 
 
    print "Compiler: " + env['CC']
    print "Platform: " + env['PLATFORM']
 
 
    # Options
    if env['CC'] == 'cl':
        env.Append(CCFLAGS = ['/EHsc', '/Zp'])
 
    # PIC flags
    if pic:
      if env['CC'] == 'gcc':
        env.Append( CCFLAGS = '-fPIC' )
 
    # Profiler flags
    if profile:
        if env['CC'] == 'gcc':
            env.Append(CCFLAGS = ['-pg'])
            env.Append(LINKFLAGS = ['-pg'])
 
 
    # Debug flags
    if debug:
        if env['CC'] == 'cl':
            env.Append(CCFLAGS = ['/W1'])
            env.Append(LINKFLAGS = ['/DEBUG', '/MAP:${TARGET}.map'])
            env['PDB'] = '${TARGET}.pdb'
 
        elif env['CC'] == 'gcc':
            env.Append(CCFLAGS = ['-ggdb', '-Wall'])
            if strict: env.Append(CCFLAGS = ['-Werror'])
            env.Append(LINKFLAGS = ['-rdynamic']) # for backtrace
 
        env.Append(CPPDEFINES = ['DEBUG'])
 
    else:
        if env['CC'] == 'gcc' and env['PLATFORM'] != 'darwin':
            env.Append(LINKFLAGS = ['-Wl,--strip-all'])
 
 
    # Optimizations
    if optimize:
        if env['CC'] in ['icc', 'icpc']:
            env.Append(CCFLAGS = ['-O', '-finline-functions', '-funroll-loops'])
        elif env['CC'] == 'gcc':
            env.Append(CCFLAGS =
                       ['-O9', '-ffast-math', '-funroll-loops'])
            #env.Append(CCFLAGS = ['-msse2 -mfpmath=sse']);
        elif env['CC'] == 'cl':
            env.Append(CCFLAGS = ['/Ox', '/GL'])
            env.Append(LINKFLAGS = ['/LTCG'])
            env.Append(ARFLAGS = ['/LTCG'])
 
 
    # Dependency files
    if depends and env['CC'] == 'gcc':
        env.Append(CCFLAGS = ['-MMD -MF ${TARGET}.d'])
 
 
    # C mode
    if c99_mode:
        if env['CC'] == 'gcc':
            env.Append(CFLAGS = ['-std=c99'])
            env.Append(CXXFLAGS = ['-std=' + cxxstd])
        elif env['CC'] == 'cl':
            env.Append(CFLAGS = ['/TP']) # C++ mode
 
 
    # Threads
    # If you don't like this code put threaded=0 in your options.py file.
    # but don't comment this out.
    if threaded:
        if env['CC'] == 'gcc':
            #if not conf.CheckLib('pthread'):
            #    print 'Need pthreads'
            #    Exit(1)
 
            env.Append(LINKFLAGS = ['-pthread'])
            env.Append(CPPDEFINES = ['_REENTRANT'])
 
        elif env['CC'] == 'cl':
            if debug:
                env.Append(CCFLAGS = ['/MTd'])
            else:
                env.Append(CCFLAGS = ['/MT'])
 
 
    # static
    if static:
        if env['CC'] == 'gcc':
            env.Append(LINKFLAGS = ['-static'])
 
 
    # Num jobs default
    default_num_jobs = 1
 
    # distcc
    if distcc:
        default_num_jobs = 2
        env.Replace(CC = 'distcc ' + env['CC'])
        env.Replace(CXX = 'distcc ' + env['CXX'])
 
    # cccache
    if ccache:
        env.Replace(CC = 'ccache ' + env['CC'])
        env.Replace(CXX = 'ccache ' + env['CXX'])




compiler_add_opts()

# Create environment and import external PATH
env = Environment(options = opts, ENV = os.environ)

Export('env')

 
# Configure
conf = Configure(env)
Export('conf')


# Import subdir build files
subsrc = SConscript(pmhome+os.sep+'src'+os.sep+'protomol'+os.sep+'SConscript')

# Get options
fah = int(env.get('fah', 0))

use_lapack = int(env.get('lapack', 0))
use_simtk_lapack = int(env.get('simtk_lapack', 0))
gui = int(env.get('gui', 0))
if gui:
    env.Append(CCFLAGS = '-DHAVE_GUI')
    env.Append(SWIGFLAGS = '-DHAVE_GUI')

if (use_lapack):
    env.Append(CCFLAGS = '-DHAVE_LAPACK')
    env.Append(SWIGFLAGS = '-DHAVE_LAPACK')
    env.Prepend(LIBS = ['blas', 'lapack'])

#env.Prepend(LIBS = ['gromacs'])
# FAH Options
fah = int(env.get('fah', 0))

# LAPACK Options
use_lapack = int(env.get('lapack', 0))
use_simtk_lapack = int(env.get('simtk_lapack', 0))
# OpenMM Options
openmm_type = env.get('openmm')
if( openmm_type == 'none' ):
    use_openmm = 0
else:
    use_openmm = 1

    if ( openmm_type == 'reference' ):
        print "USING REFERENCE"
        use_openmm_reference = 1
        use_openmm_cuda = 0
    elif ( openmm_type == 'cuda' ):
        print "USING CUDA"
        use_openmm_reference = 0
        use_openmm_cuda = 1


    openmm_type = env.get('openmm', 'none')
    if openmm_type != 'none':       
        # The following must bail if it is not found as openmm is not
        # installed to a place that the compiler will locate by default. The
        # same is also true for CUDA.
        openmm_home = check_envvar('OPENMM_HOME', True)

        env.Append(CPPPATH = [openmm_home + os.sep + 'include'])
        env.Append(LIBPATH = [openmm_home + os.sep + 'lib'    ])

        if openmm_type == 'reference':
            if check_library('OpenMM_d', True):
                env.Append(CPPDEFINES = ['HAVE_OPENMM'])

        if openmm_type == 'cuda':
            cuda_home = check_envvar('CUDA_HOME', True)

            env.Append(LIBPATH = [cuda_home + os.sep + 'lib'])

            print env['LIBPATH']
            #check_library('OpenMMCuda_d', True) and 
            if check_library(conf, 'OpenMMCuda', True) and check_library(conf, 'cudart', True):
                env.Append(CPPDEFINES = ['HAVE_OPENMM'])


# Configure compiler
print "SHOULD CALL IT HERE"
compiler_configure()
print "DO?NE"

# Include protomol
env.Append(CPPPATH = '#')


# Generate Help
Help(opts.GenerateHelpText(env))


# libprotomol
libname = 'protomol'
if fah: libname = libname + '-fah'
libsrc = []
libs = []
libs.append(libname)


if not env.GetOption('clean'):
    os.chdir(pmhome)
    execfile(pmhome+os.sep+'package_h.py')
    locals()["PROTOMOL_HOME"] = "../protomol"
    #execfile(pmhome+os.sep+'config.py')

    # Run Configurations
    compiler_configure()
    #config_configure()
    # Folding@Home library version
    if fah:
      execfile(pmhome+os.sep+'configfah.py')

      if (have_libfah and have_bzip2 and have_boost_iostreams):
	env.Append(CPPDEFINES = ['HAVE_LIBFAH'])
      else:
        print 'Need libfah, boost iostreams and libbzip2 for Folding@Home build'
        Exit(1)

      env.Append(CPPDEFINES = ['BUILD_FOR_FAH'])


    env = conf.Finish()


if fah:
    libsrc.append(pmhome+os.sep+'protomol'+os.sep+'modules.cpp')


# Get source
for s in subsrc:
    libsrc.append('#/protomol' + os.sep+ s)

src = [pmhome+'protomol'+os.sep+'main.cpp', pmhome+os.sep+'protomol'+os.sep+'modules.cpp']

# Build Protomol
env.Append(LIBPATH = ['.'])

libsrc2 = [
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'force'+os.sep+'nonbonded'+os.sep+'BSpline.cpp',
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'force'+os.sep+'nonbonded'+os.sep+'Hermite.cpp',
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'force'+os.sep+'nonbonded'+os.sep+'fft.c',
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'integrator'+os.sep+'base'+os.sep+'ImpulseIntegrator.cpp',
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'integrator'+os.sep+'normal'+os.sep+'BBKIntegrator.cpp',
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'integrator'+os.sep+'leapfrog'+os.sep+'NPTVerletIntegrator.cpp',
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'integrator'+os.sep+'leapfrog'+os.sep+'ModifierNPTShake.cpp',
pmhome+os.sep+'..'+os.sep+'mdl'+os.sep+'interface'+os.sep+'integrator'+os.sep+'leapfrog'+os.sep+'ModifierNPTRattle.cpp',
]
for s in subsrc:
     # I am removing this file from the shared object
     # compilation - it's only used if HAVE_MPI is true, which
     # will never be true for MDL.
     #if (s != 'parallel/FFTComplex.cpp'):
     libsrc2.append(pmhome+os.sep+'src'+os.sep+'protomol'+os.sep+s)
env.Prepend(LIBS = [''])
libname2 = 'mdl'
#if (env['PLATFORM'] == 'darwin'):
#   sl = env.StaticLibrary(libname2, libsrc2, LIBSUFFIX=env['LIBSUFFIX'], LIBS=env['LIBS'])
sl = env.SharedLibrary(libname2, libsrc2, env['LIBS'])
#if (env['PLATFORM'] != 'win32' and env['PLATFORM'] != 'darwin'):
#   sl = env.SharedLibrary(libname2, libsrc2, env['LIBS'])
#else:
os.chdir(pwd)
pyWrap(env, pmhome)
Default('.')

# Tidy
#env.Command('tidy', '', 'rm -f config.log $$(find . -name \*~ -o -name \#*)')






