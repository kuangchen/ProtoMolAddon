import os
import glob

# ProtoMol
if not os.environ.has_key('PROTOMOL_HOME'):
  print 'PROTOMOL_HOME not set'
  Exit(1)

PROTOMOL_HOME = os.environ['PROTOMOL_HOME']
execfile(PROTOMOL_HOME + os.sep + 'compiler.py')

opts = Options('options.py')
compiler_add_opts()

env = Environment(options = opts, ENV = os.environ)
conf = Configure(env)

Help(opts.GenerateHelpText(env))

if not env.GetOption('clean'):
  env.Append(CPPPATH = [PROTOMOL_HOME])
  env.Append(LIBPATH = [PROTOMOL_HOME])

  if not (conf.CheckLib('protomol') or conf.CheckLib('protomol-fah')):
    print 'Need protomol >= 3.0 please set PROTOMOL_HOME';
    Exit(1)

  execfile(PROTOMOL_HOME + os.sep + 'config.py')
  compiler_configure()
  

# Data comparator
env.Append(CPPDEFINES = ['DATA_COMPARATOR_STANDALONE'])
env.Program('DataComparator', 'src/DataComparator.cpp')
