#!/usr/bin/python
#
#  This software is available as Open-Source software under the
#  terms of the new BSD license as follows:
#
#  Copyright (c) 2004, 2005, 2006, 2007, 2008 Cauldron Development LLC
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the name of the Cauldron Development LLC nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
from optparse import OptionParser
import sys
import time
import datetime
import os
import glob
import subprocess
import difflib
import curses


IN="stdin"
STD="stdout"
ERR="stderr"
RET="return"
LOG="log"
EXP="expect"
DISABLE="disable"
ARGS="args"
DATADIR="data"

TEST_POSTFIX="Test"
SUITE_POSTFIX="Tests"

VALGRIND_CMD="valgrind -q --trace-children=yes"
PYTHON_INTERPRETER_STRING='#!/usr/bin/python'
PYTHON_CMD='python'


# Get screen width
win = curses.initscr()
(HEIGHT, WIDTH) = win.getmaxyx()
if WIDTH > 100: WIDTH = 100
curses.endwin()


# Statistics
suites = 0
passed = 0
uninited = 0
inited = 0
failed = 0
disabled = 0
stdFail = False
errFail = False
retFail = False
otherFail = False


# Test result codes
PASSED   = 0
FAILED   = 1
UNINITED = 2
INITED   = 3
DISABLED = 4

def deleteFile(path):
    if os.path.exists(path):
        os.unlink(path)


def makeDataName(path, ext = ''):
    (dir, test) = os.path.split(path)

    if ext != '': ext = '.' + ext

    if dir == '':
        if test == '': return DATADIR
        return DATADIR + os.sep + test + ext

    return dir + os.sep + DATADIR + os.sep + test + ext


def compare(file1, file2):
    try:
        lines1 = lines2 = None
        lines1 = open(file1)
        lines2 = open(file2)

        while True:
            try:
                line1 = lines1.next()
                while (file1.endswith(ERR) and not line1.startswith('DEBUG')):
                    line1 = lines1.next()
            except: line1 = None
            try:
                line2 = lines2.next()
                while (file1.endswith(ERR) and not line2.startswith('DEBUG')):
                    line2 = lines2.next()
            except: line2 = None

            if (line1 != line2): return False
            if line1 == None: break

        return True

    finally:
        if lines1: lines1.close()
        if lines2: lines2.close()


def doTest(path):
    (dir, test) = os.path.split(path)
 
    global stdFail, errFail, retFail, otherFail

    # Make sure TEST exists and can be executed
    if not os.access(path, os.X_OK):
        print test + ' is not an executable file'
        sys.exit(1)

    # Create output directory if necessary
    if dir == '': dataDir = DATADIR
    else: dataDir = dir + os.sep + DATADIR
    if os.path.exists(dataDir):
        if not os.path.isdir(dataDir):
            print dataDir + ' is not a directory!'
            sys.exit(1)
    else:
        os.mkdir(dataDir)

    # Init file names
    base = makeDataName(path) + '.'
    std_file     = base + STD
    err_file     = base + ERR
    ret_file     = base + RET
    input_file   = base + IN
    args_file    = base + ARGS
    disable_file = base + DISABLE

    # Run test
    if os.path.exists(disable_file): return DISABLED

    testFile = os.getcwd() + os.sep + path
    cmd = [testFile]

    f = open(testFile)
    if PYTHON_INTERPRETER_STRING == f.read(len(PYTHON_INTERPRETER_STRING)):
        cmd = [PYTHON_CMD] + cmd
    f.close()

    if os.path.exists(args_file):
        args = open(args_file).read()
        cmd += args.split(' \t')

    if options.valgrind:
        cmd = [VALGRIND_CMD] + cmd

    # Open files
    if os.path.exists(input_file): input = open(input_file)
    else: input = None

    stdout = open(std_file, 'w')
    stderr = open(err_file, 'w')

    if options.verbosity:
        print
        for arg in cmd: print arg,
        print
        sys.stdout.flush()

    if dir == '': dir = None
    p = subprocess.Popen(' '.join(cmd), shell = True, stdin = input,
                         stdout = stdout, stderr = stderr, cwd = dir)
    p.wait()

    # Close files
    stdout.close()
    stderr.close()
    if input: input.close()

    # Write return code
    ret = open(ret_file, 'w')
    ret.write(str(p.returncode) + '\n')
    ret.close()

    # Check output
    for file in [std_file, err_file, ret_file]:
        if not os.path.exists(file + '.' + EXP):
            return UNINITED

    stdFail = errFail = retFail = otherFail = False
    for file in glob.glob(makeDataName(path, '*.' + EXP)):
        base = file[0 : len(file) - len(EXP) - 1]

        if not compare(base, file):
            if base == std_file: stdFail = True
            elif base == err_file: errFail = True
            elif base == ret_file: retFail = True
            else: otherFail = True

    if stdFail or errFail or retFail or otherFail:
        return FAILED

    # Clean up
    deleteFile(std_file)
    deleteFile(err_file)
    deleteFile(ret_file)
    deleteFile(base + LOG)

    return PASSED


def formatResult(test, files, status, color):
    str = files
    length = len(test) + len(files) + len(status)
    for i in range(0, WIDTH - length): str += ' '

    return str + color + status + PLAIN_COLOR


def runTest(test):
    sys.stdout.write(test + ':')
    sys.stdout.flush()

    result = doTest(test)

    if result == PASSED:
        print formatResult(test + ':', '', '[PASS]', PASS_COLOR)
    if result == FAILED:
        str = ''
        if stdFail: str += ' ' + 'std'
        if errFail: str += ' ' + 'err'
        if retFail: str += ' ' + 'ret'
        if otherFail: str += ' ' + 'other'
        print formatResult(test + ':', str, '[FAIL]', FAIL_COLOR)
    if result == UNINITED:
        print formatResult(test + ':', '', '[UNINITIALZED]', UINT_COLOR)
    if result == INITED:
        print formatResult(test + ':', '', '[INITIALZED]', INIT_COLOR)
    if result == DISABLED:
        print formatResult(test + ':', '', '[DISABLED]', DISABLE_COLOR)

    return result


def diffTest(path):
    numDiff = 0

    for file in glob.glob(makeDataName(path) + '*' + '.' + EXP):
        base = file[0 : len(file) - len(EXP) - 1]
        (dir, name) = os.path.split(base)

        if compare(file, base): continue

        numDiff += 1
        result = difflib.ndiff(open(file).readlines(), open(base).readlines())

        print labeledBar(name)
        for line in result:
            dir = line[0]
            line = line[1 : len(line) - 1]
            if dir == '-':
                print OLD_COLOR + '<',
            elif dir == '+':
                print NEW_COLOR + '>',

            print line + PLAIN_COLOR

    if numDiff == 0:
        print "No differences"
    else: print bar()


def enableTest(test):
    name = makeDataName(test, DISABLE)
    deleteFile(name)


def disableTest(test):
    open(makeDataName(test, DISABLE), 'w').close()


def interact(test, result):
    if not options.interactive: return result

    while options.interactive:
        sys.stdout.write('(a)bort (c)ontinue (D)isable (d)iff (i)nitialize '
                         '(l)og (r)eset (t)est (q)uit (v)iew? ')
        sys.stdout.flush()

        cmd = sys.stdin.readline()[0]
        print

        if cmd == 'a': sys.exit(0)

        elif cmd == 'c': break

        elif cmd == 'D':
            disableTest(test)
            return DISABLED

        elif cmd == 'd':
            diffTest(test)

        elif cmd == 'i':
            initializeTest(test)
            return INITED

        elif cmd == 'l':
            viewTest(test, [LOG])

        elif cmd == 'r':
            resetTest(test)
            result = UNINITED

        elif cmd == 't':
            result = runTest(test)

        elif cmd == 'q':
            options.interactive = False

        elif cmd == 'v':
            viewTest(test)

        elif cmd == '\n' or cmd == '\r':
            break # Continue

        else:
            print "Invalid command '" + cmd + "'"

    return result


def runTestInteractive(test):
    global passed, failed, uninited, inited, disabled

    result = runTest(test)

    if not (result == PASSED or result == DISABLED):
        result = interact(test, result)

    if result == PASSED: passed += 1
    if result == FAILED: failed += 1
    if result == UNINITED: uninited += 1
    if result == INITED: inited += 1
    if result == DISABLED: disabled += 1        

    return result


def getSuiteName(dir):
    name = ''
    while True:
        (dir, tail) = os.path.split(dir)
        if tail == '': break
        if tail.endswith(SUITE_POSTFIX):
            tail = tail[0 : len(tail) - len(SUITE_POSTFIX)]
            if name != '': name = tail + '.' + name
            else: name = tail

    return name


def runSuiteLocal():
    global suites

    name = getSuiteName(os.getcwd())

    print labeledBar('Test Suite: ' + name)

    for test in glob.glob('*' + TEST_POSTFIX):
        result = runTestInteractive(test)


    print

    suites += 1

    runSuites()


def runSuite(suite):
    CWD = os.getcwd()
    os.chdir(suite)
    runSuiteLocal()
    os.chdir(CWD)


def runSuites():
    for suite in glob.glob('*' + SUITE_POSTFIX):
        if os.path.isdir(suite):
            runSuite(suite)  


def labeledBar(label):
    length = len(label) + 2
    width1 = (WIDTH - length) / 2
    width2 = WIDTH - length - width1

    str = ''
    for i in range(0, width1): str += '*'
    str += ' ' + label + ' '
    for i in range(0, width2): str += '*'

    return str


def bar():
    str = ''
    for i in range(0, WIDTH): str += '*'

    return str


def formatLine(left, right):
    str = left
    for i in range(0, WIDTH - len(left) - len(right)): str += ' '
    str += right

    return str


def initializeTest(path):
    for ext in [STD, ERR, RET]:
        name = makeDataName(path, ext)
        expect = name + '.' + EXP
        deleteFile(expect)
        os.rename(name, expect)


def initTest(test):
    resetTest(test)
    doTest(test)
    initializeTest(test)
    viewTest(test)


def resetTest(path):
    for ext in [STD, ERR, RET, DISABLE, LOG]:
        name = makeDataName(path, ext)
        deleteFile(name);
        deleteFile(name + '.' + EXP)


def tryTest(test):
    options.interactive = True
    runTestInteractive(test)
    viewTest(test)


def viewTest(path, exts = [STD, ERR, RET, IN]):
    (dir, name) = os.path.split(path)

    for ext in exts:
        for ext in [ext, ext + '.' + EXP]:
            file = makeDataName(path, ext)
            if os.path.exists(file):
                print labeledBar(name + '.' + ext)
                sys.stdout.write(open(file).read())

    print bar()


def getTimeString():
    utc = datetime.datetime.utcnow()
    now = datetime.datetime.now()
    offset = now.hour - utc.hour
    return now.strftime('%Y-%d-%m %H:%M:%S') + ' UTC%+d' % offset


def runAllTests(args = None):
    global suites, passed, uninited, inited, failed, disabled

    startTime = datetime.datetime.now()
    
    print labeledBar(getTimeString())
    print formatLine('Test Name: [file...]', 'Result')

    if not args:
        (parent, thisDir) = os.path.split(os.getcwd())
        if thisDir.endswith(SUITE_POSTFIX):
            runSuiteLocal()

        runSuites()

    else:
        for name in args:
            if os.path.isdir(name): runSuite(name)
            else: runTestInteractive(name)

    total = passed + uninited + inited + failed + disabled

    print labeledBar('Summary')
    
    if passed > 0 and failed == 0 and inited == 0 and uninited == 0:
        sys.stdout.write(SPASS_COLOR)
    print formatLine('Passed ', str(passed)) + PLAIN_COLOR

    if failed: sys.stdout.write(SFAIL_COLOR)
    print formatLine('Failed ', str(failed)) + PLAIN_COLOR

    if uninited: sys.stdout.write(SUINT_COLOR)
    print formatLine('Uninitialized ', str(uninited)) + PLAIN_COLOR

    if inited: sys.stdout.write(SINIT_COLOR)
    print formatLine('Initialized ', str(inited)) + PLAIN_COLOR

    if disabled: sys.stdout.write(SDISABLE_COLOR)
    print formatLine('Disabled ', str(disabled)) + PLAIN_COLOR

    print
    print formatLine('Suites ', str(suites))
    print formatLine('Tests ', str(total))


    delta = datetime.datetime.now() - startTime
    seconds = delta.seconds
    hours = seconds / (60 * 60)
    seconds %= 60 * 60
    minutes = seconds / 60
    seconds %= 60

    print formatLine('Time', '%d:%02d:%02d:%02d.%04d' %
                     (delta.days, hours, minutes, seconds, delta.microseconds))
   


# Usage
usage = (
    'Usage: %prog [options] [command]\n\n'
    'Command:\n'
    '  enable <test>      enable a previously disabled a test\n'
    '  disable <test>     disable a test\n'
    '  init <test>        initialize a test\n'
    '  reset <test>       reset a test by removing its .expect files\n'
    '  run <test>         run a specific test\n'
    '  try <test>         run a test and view its results (implies -I)\n'
    '  view <test>        view a test\'s files\n'
    '\n'
    '  If no command is given all tests will be run.'
)

# Setup command line options
parser = OptionParser(usage = usage)
parser.add_option("-I", "--interactive", help="run tests in interactive mode",
                  default=False, action="store_true", dest="interactive")
parser.add_option("-V", "--valgrind", help="run tests under valgrind",
                  default=False, action="store_true", dest="valgrind")
parser.add_option("-v", None, help="increase verbosity",
                  default=False, action="count", dest="verbosity")
parser.add_option("-C", "--disable-color", help="disable color output",
                  default=True, action="store_false", dest="color")


# Parse args
(options, args) = parser.parse_args()

if options.color:
    SUINT_COLOR='[30;43m'
    SINIT_COLOR='[30;46m'
    SPASS_COLOR='[30;42m'
    SFAIL_COLOR='[01;37;41m'
    SDISABLE_COLOR='[01;37;44m'
    PLAIN_COLOR='[00m'
    INIT_COLOR='[35m'
    UINT_COLOR='[33m'
    PASS_COLOR='[32m'
    FAIL_COLOR='[31m'
    DISABLE_COLOR='[34m'
    OLD_COLOR='[31m'
    NEW_COLOR='[34m'

else:
    SUINT_COLOR=''
    SINIT_COLOR=''
    SPASS_COLOR=''
    SFAIL_COLOR=''
    SDISABLE_COLOR=''
    PLAIN_COLOR=''
    INIT_COLOR=''
    UINT_COLOR=''
    PASS_COLOR=''
    FAIL_COLOR=''
    DISABLE_COLOR=''
    OLD_COLOR=''
    NEW_COLOR=''


def require_arg():
    if len(args) != 2:
        parser.error('Command \'' + args[0] + '\' requires one argument')
        sys.exit(1)

if len(args) > 0:
    if args[0] == 'enable':
        require_arg()
        enableTest(args[1])

    elif args[0] == 'disable':
        require_arg()
        disableTest(args[1])

    elif args[0] == 'init':
        require_arg()
        initTest(args[1])

    elif args[0] == 'reset':
        require_arg()
        resetTest(args[1])

    elif args[0] == 'run':
        require_arg()
        if os.path.isdir(args[1]): runAllTests([args[1]])
        else: runTestInteractive(args[1])

    elif args[0] == 'try':
        require_arg()
        tryTest(args[1])

    elif args[0] == 'view':
        require_arg()
        viewTest(args[1])

    else:
        if len(args) == 1 and not os.path.isdir(args[0]):
            runTestInteractive(args[0])
        else: runAllTests(args)

else:
    runAllTests()
